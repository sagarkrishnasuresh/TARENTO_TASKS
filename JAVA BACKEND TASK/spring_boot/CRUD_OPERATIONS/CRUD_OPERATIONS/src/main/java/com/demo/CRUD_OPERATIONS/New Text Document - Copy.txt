Sure! Let's break down the project and provide code snippets along with explanations for each part. Given the scope of the project, I'll start with the backend, then proceed to the frontend. For the sake of simplicity, I'll keep the code concise, focusing on core features.

### **1. Backend: Spring Boot Application**

#### **1.1. Project Setup**

1. **Create a Spring Boot Project:**
   - You can create a new Spring Boot project using [Spring Initializr](https://start.spring.io/). Select the following dependencies:
     - Spring Web
     - Spring Data JPA
     - PostgreSQL Driver
     - Spring Security (for authentication)

2. **Directory Structure:**
   - The project will follow the standard Maven directory structure:

   ```
   src/
   ├── main/
   │   ├── java/
   │   │   └── com/
   │   │       └── grievance/
   │   │           ├── controller/
   │   │           ├── model/
   │   │           ├── repository/
   │   │           └── service/
   │   └── resources/
   │       ├── application.properties
   └── test/
   ```

#### **1.2. Database Configuration**

**`application.properties`**:
```properties
# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/grievance_db
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
```

### **1.3. Models (Entities)**

Let's define the entities based on the ER diagram.

**`User.java`**:
```java
package com.grievance.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    private String userName;
    private String userEmail;
    private String userPassword;

    // Getters and Setters
}
```

**`Grievance.java`**:
```java
package com.grievance.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
public class Grievance {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long grievanceId;

    @ManyToOne
    @JoinColumn(name = "userId")
    private User user;

    private String grievanceType;
    private String description;

    @ManyToOne
    @JoinColumn(name = "supervisorId")
    private Supervisor supervisor;

    @ManyToOne
    @JoinColumn(name = "assigneeId")
    private Assignee assignee;

    private LocalDateTime createdAt;

    @ManyToOne
    @JoinColumn(name = "statusId")
    private Status status;

    // Getters and Setters
}
```

**`Supervisor.java`**:
```java
package com.grievance.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
public class Supervisor {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long supervisorId;

    private String supervisorName;
    private String supervisorEmail;
    private String supervisorPassword;

    @OneToMany(mappedBy = "supervisor")
    private List<Grievance> grievances;

    // Getters and Setters
}
```

**`Assignee.java`**:
```java
package com.grievance.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
public class Assignee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long assigneeId;

    private String assigneeName;
    private String assigneeEmail;
    private String assigneePassword;

    @OneToMany(mappedBy = "assignee")
    private List<Grievance> grievances;

    // Getters and Setters
}
```

**`Status.java`**:
```java
package com.grievance.model;

import jakarta.persistence.*;

@Entity
public class Status {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long statusId;

    private String statusUpdate;

    @OneToMany(mappedBy = "status")
    private List<Grievance> grievances;

    // Getters and Setters
}
```

### **1.4. Repositories**

Create repositories for each entity to interact with the database.

**`UserRepository.java`**:
```java
package com.grievance.repository;

import com.grievance.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
    User findByUserEmail(String email);
}
```

**`GrievanceRepository.java`**:
```java
package com.grievance.repository;

import com.grievance.model.Grievance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface GrievanceRepository extends JpaRepository<Grievance, Long> {
}
```

### **1.5. Services**

The service layer contains the business logic of the application.

**`UserService.java`**:
```java
package com.grievance.service;

import com.grievance.model.User;
import com.grievance.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    public User registerUser(User user) {
        return userRepository.save(user);
    }

    public User getUserByEmail(String email) {
        return userRepository.findByUserEmail(email);
    }
}
```

**`GrievanceService.java`**:
```java
package com.grievance.service;

import com.grievance.model.Grievance;
import com.grievance.repository.GrievanceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class GrievanceService {

    @Autowired
    private GrievanceRepository grievanceRepository;

    public Grievance createGrievance(Grievance grievance) {
        return grievanceRepository.save(grievance);
    }

    public Grievance updateGrievance(Grievance grievance) {
        return grievanceRepository.save(grievance);
    }

    public Grievance getGrievanceById(Long id) {
        return grievanceRepository.findById(id).orElse(null);
    }
}
```

### **1.6. Controllers**

Controllers handle HTTP requests and return responses.

**`UserController.java`**:
```java
package com.grievance.controller;

import com.grievance.model.User;
import com.grievance.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public ResponseEntity<User> registerUser(@RequestBody User user) {
        User createdUser = userService.registerUser(user);
        return ResponseEntity.ok(createdUser);
    }

    @GetMapping("/{email}")
    public ResponseEntity<User> getUserByEmail(@PathVariable String email) {
        User user = userService.getUserByEmail(email);
        return ResponseEntity.ok(user);
    }
}
```

**`GrievanceController.java`**:
```java
package com.grievance.controller;

import com.grievance.model.Grievance;
import com.grievance.service.GrievanceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/grievances")
public class GrievanceController {

    @Autowired
    private GrievanceService grievanceService;

    @PostMapping("/create")
    public ResponseEntity<Grievance> createGrievance(@RequestBody Grievance grievance) {
        Grievance createdGrievance = grievanceService.createGrievance(grievance);
        return ResponseEntity.ok(createdGrievance);
    }

    @PutMapping("/update")
    public ResponseEntity<Grievance> updateGrievance(@RequestBody Grievance grievance) {
        Grievance updatedGrievance = grievanceService.updateGrievance(grievance);
        return ResponseEntity.ok(updatedGrievance);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Grievance> getGrievanceById(@PathVariable Long id) {
        Grievance grievance = grievanceService.getGrievanceById(id);
        return ResponseEntity.ok(grievance);
    }
}
```

### **2. Frontend: Basic User Interface**

For simplicity, I'll use plain HTML, CSS, and JavaScript for the frontend. You can later upgrade it to use React or Angular.

**`index.html`**:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grievance Management System</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Grievance Management System</h1>

    <h2>Register User</h2>
    <form id="registerForm">
        <label for="userName">Name:</label>
        <input type="text" id="userName" name="userName" required>
        <br>
        <label for="userEmail">Email:</label>
        <input type="email" id="userEmail" name="userEmail" required>
        <br>
        <label for="user

Password">Password:</label>
        <input type="password" id="userPassword" name="userPassword" required>
        <br>
        <button type="submit">Register</button>
    </form>

    <h2>Submit Grievance</h2>
    <form id="grievanceForm">
        <label for="description">Description:</label>
        <input type="text" id="description" name="description" required>
        <br>
        <label for="grievanceType">Grievance Type:</label>
        <input type="text" id="grievanceType" name="grievanceType" required>
        <br>
        <button type="submit">Submit Grievance</button>
    </form>

    <script src="app.js"></script>
</body>
</html>
```

**`app.js`**:
```javascript
document.getElementById("registerForm").addEventListener("submit", function(event) {
    event.preventDefault();

    const user = {
        userName: document.getElementById("userName").value,
        userEmail: document.getElementById("userEmail").value,
        userPassword: document.getElementById("userPassword").value
    };

    fetch('/api/users/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(user)
    })
    .then(response => response.json())
    .then(data => {
        console.log('User registered:', data);
    })
    .catch(error => console.error('Error:', error));
});

document.getElementById("grievanceForm").addEventListener("submit", function(event) {
    event.preventDefault();

    const grievance = {
        description: document.getElementById("description").value,
        grievanceType: document.getElementById("grievanceType").value
    };

    fetch('/api/grievances/create', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(grievance)
    })
    .then(response => response.json())
    .then(data => {
        console.log('Grievance submitted:', data);
    })
    .catch(error => console.error('Error:', error));
});
```

### **3. Testing**

**Unit Testing** (with JUnit):
- Create test cases for each service to ensure they perform the expected operations.
  
```java
package com.grievance.service;

import com.grievance.model.User;
import com.grievance.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;

public class UserServiceTest {

    private UserRepository userRepository = Mockito.mock(UserRepository.class);
    private UserService userService = new UserService(userRepository);

    @Test
    public void testRegisterUser() {
        User user = new User();
        user.setUserName("Test User");
        user.setUserEmail("test@example.com");

        Mockito.when(userRepository.save(user)).thenReturn(user);

        User result = userService.registerUser(user);
        assertEquals("Test User", result.getUserName());
        assertEquals("test@example.com", result.getUserEmail());
    }
}
```

### **4. Deployment**

- **Dockerize** the application if needed for consistent deployment across environments.
- Deploy the backend on services like AWS or Heroku and the frontend on Netlify or Vercel.

### **Conclusion**

This is a basic outline with sample code to get you started on your Grievance Management System project. As you proceed, you'll likely want to expand and refine the code, especially the frontend interface and user experience, as well as add more complex features like authentication, authorization, and email notifications.

Feel free to reach out if you have more specific requirements or need further assistance!